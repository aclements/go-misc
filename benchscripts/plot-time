#!/usr/bin/env python3
# -*- python -*-

# Copyright 2015 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

import argparse
import os
import datetime

import numpy as np
import scipy.stats as stats
import pandas as pd

import matplotlib as mpl
mpl.use('GTK3Cairo')
mpl.rc('figure', facecolor='1')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns

# TODO: Take a rev-list and work from that instead. Then there can be
# benchmarks mixed in from other branches, and it will be much easier
# to specify a baseline.

def main():
    argp = argparse.ArgumentParser(
        description='''Plot benchmarks over time.''')
    argp.add_argument('--baseline', action='append', type=argparse.FileType(),
                      help='''Benchmark output files to use as a baseline.''')
    argp.add_argument('benchout', nargs='+', type=argparse.FileType(),
                      help='''Benchmark output files to read. Must be in
                      directories named YYYY-MM-DDTHH:MM:SS.''')
    args = argp.parse_args()

    baseline = None
    baselineNames = set()
    if args.baseline:
        baseline = pd.DataFrame()
        for benchout in args.baseline:
            b1 = parseBenchmarks(benchout)
            b1['date'] = dateOf(benchout.name)
            baseline = baseline.append(b1, ignore_index=True)
            baselineNames.add(benchout.name)

    print(args.baseline, baselineNames)
    benchmarks = pd.DataFrame()
    for benchout in args.benchout:
        if benchout.name in baselineNames:
            continue
        if '2015-02-18' in benchout.name:
            continue            # XXX
        if '2015-05-05T10:38:48-04:00' in benchout.name:
            # XXX Off-master commit
            continue
        b1 = parseBenchmarks(benchout)
        b1['date'] = dateOf(benchout.name)
        benchmarks = benchmarks.append(b1, ignore_index=True)

    benchMeans = getBenchMeans(benchmarks)
    gmeanByDate = gmeanBenchmarks(benchMeans)

    for i, (gmean1, gmean2) in enumerate(zip(gmeanByDate['ops/sec'], gmeanByDate['ops/sec'][1:])):
        delta = (gmean2 - gmean1) / gmean1
        if abs(delta) > 0.05:
            date = gmeanByDate['date'][i+1]
            print("%s %s %+g%%" % (shaOfDate(date), date, delta*100))

    if baseline is not None:
        # Normalize each date geomean to baseline
        #
        # XXX Should this just add a line?
        baselineGmean = stats.gmean(getBenchMeans(baseline)['ops/sec'])
        gmeanByDate['normalized ops/sec'] = gmeanByDate['ops/sec'] / baselineGmean
        plotCol = 'normalized ops/sec'
    else:
        plotCol = 'ops/sec'

#     # Normalize each benchmark to latest result.
#     latestBenchMeans = benchMeans.sort('date', ascending=False).groupby('name').\
#                        head(1).reset_index(drop=True)
#     latestBenchMeans = latestBenchMeans.drop('date', 1).set_index('name')
#     print(latestBenchMeans)
# #    normBenchMeans = benchMeans.drop('date').groupby('name').

    fig, ax = plt.subplots(1, 1, dpi=120)

    ax.set_title('go1 benchmarks relative to Go 1.4') # XXX
    ax.plot(gmeanByDate['date'].astype(datetime.datetime), gmeanByDate[plotCol])
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %e'))
    ax.format_xdata = mdates.DateFormatter('%Y-%m-%dT%H:%M:%S')
    ax.set_ylim(bottom=0)
    ax.set_ylabel('Geomean performance (%s)' % plotCol)
    #fig.autofmt_xdate()
    fig.tight_layout()
    plt.show()

def getBenchMeans(benchmarks):
    # Compute ops/sec
    benchmarks['ops/sec'] = 1e9 / benchmarks['ns/op']

    # Compute the mean for each benchmark.
    # TODO: Discard outliers.
    return benchmarks.groupby(['date', 'name']).mean().reset_index()

def gmeanBenchmarks(benchMeans):
    # For each date, compute the geometric mean across benchmarks.
    return benchMeans.groupby('date')['ops/sec'].agg(stats.gmean).reset_index()

def parseBenchmarks(fp):
    results = []
    for line in fp:
        f = line.split()
        if len(f) < 4:
            continue
        name = f[0]
        ns = None
        for i, field in enumerate(f):
            if field == 'ns/op':
                ns = float(f[i-1])
        if ns is None:
            continue

        results.append((name, ns))

    # UGH. This doesn't work if results == []
    return pd.DataFrame(results,
                        columns=('name', 'ns/op'))

def dateOf(path):
    p = os.path.basename(os.path.dirname(path))
    if p.endswith('-04:00'):
        p = p[:-len('-04:00')]  # XXX
    return datetime.datetime.strptime(p, '%Y-%m-%dT%H:%M:%S')

def shaOfDate(date):
    d = date.strftime('%Y-%m-%dT%H:%M:%S')
    return os.path.basename(os.readlink('history/by-date/' + d))

if __name__ == '__main__':
    main()
